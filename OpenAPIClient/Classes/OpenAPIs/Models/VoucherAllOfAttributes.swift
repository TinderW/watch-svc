//
// VoucherAllOfAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VoucherAllOfAttributes: Codable, JSONEncodable, Hashable {

    /** Type of voucher */
    public var kind: String
    /** Discount value of the voucher */
    public var discountValue: Double
    /** Additional details about the voucher */
    public var description: String
    /** Expiration timestamp (Unix epoch time) */
    public var expiresAt: Int64
    /** Creation timestamp (Unix epoch time) */
    public var createAt: Int64
    /** Voucher code */
    public var code: String
    /** Currency of the discount */
    public var currency: String
    /** Current status of the voucher (e.g., active, redeemed, expired) */
    public var status: String
    /** Minimum spend required to redeem the voucher */
    public var minimumSpend: Double?
    /** URL to the voucher's photo */
    public var photoUrl: String

    public init(kind: String, discountValue: Double, description: String, expiresAt: Int64, createAt: Int64, code: String, currency: String, status: String, minimumSpend: Double? = nil, photoUrl: String) {
        self.kind = kind
        self.discountValue = discountValue
        self.description = description
        self.expiresAt = expiresAt
        self.createAt = createAt
        self.code = code
        self.currency = currency
        self.status = status
        self.minimumSpend = minimumSpend
        self.photoUrl = photoUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case kind
        case discountValue
        case description
        case expiresAt
        case createAt
        case code
        case currency
        case status
        case minimumSpend
        case photoUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(kind, forKey: .kind)
        try container.encode(discountValue, forKey: .discountValue)
        try container.encode(description, forKey: .description)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(createAt, forKey: .createAt)
        try container.encode(code, forKey: .code)
        try container.encode(currency, forKey: .currency)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(minimumSpend, forKey: .minimumSpend)
        try container.encode(photoUrl, forKey: .photoUrl)
    }
}

