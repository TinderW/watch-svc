//
// SwapProposalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SwapProposalAPI {

    /**

     - parameter accessToken: (header)  
     - parameter createSwapOfferProposal: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createSwapProposal(accessToken: String, createSwapOfferProposal: CreateSwapOfferProposal, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateSwapProposal200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createSwapProposalWithRequestBuilder(accessToken: accessToken, createSwapOfferProposal: createSwapOfferProposal).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /integrations/watch-svc-go/swap-proposal
     - create swap proposal
     - parameter accessToken: (header)  
     - parameter createSwapOfferProposal: (body)  
     - returns: RequestBuilder<CreateSwapProposal200Response> 
     */
    open class func createSwapProposalWithRequestBuilder(accessToken: String, createSwapOfferProposal: CreateSwapOfferProposal) -> RequestBuilder<CreateSwapProposal200Response> {
        let localVariablePath = "/integrations/watch-svc-go/swap-proposal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createSwapOfferProposal)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "access-token": accessToken.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateSwapProposal200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accessToken: (header)  
     - parameter offerProposalIds: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSwapOffersByIds(accessToken: String, offerProposalIds: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetSwapOffersByIds200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getSwapOffersByIdsWithRequestBuilder(accessToken: accessToken, offerProposalIds: offerProposalIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /integrations/watch-svc-go/swap-proposal/ids
     - get all the swap proposals by their id
     - parameter accessToken: (header)  
     - parameter offerProposalIds: (query)  (optional)
     - returns: RequestBuilder<GetSwapOffersByIds200Response> 
     */
    open class func getSwapOffersByIdsWithRequestBuilder(accessToken: String, offerProposalIds: String? = nil) -> RequestBuilder<GetSwapOffersByIds200Response> {
        let localVariablePath = "/integrations/watch-svc-go/swap-proposal/ids"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offer-proposal-ids": (wrappedValue: offerProposalIds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "access-token": accessToken.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSwapOffersByIds200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accessToken: (header)  
     - parameter offerId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSwapProposalsByOfferId(accessToken: String, offerId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetSwapProposalsByOfferId200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getSwapProposalsByOfferIdWithRequestBuilder(accessToken: accessToken, offerId: offerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /integrations/watch-svc-go/swap-proposal
     - get all the swap proposals by swap offer id
     - parameter accessToken: (header)  
     - parameter offerId: (query)  (optional)
     - returns: RequestBuilder<GetSwapProposalsByOfferId200Response> 
     */
    open class func getSwapProposalsByOfferIdWithRequestBuilder(accessToken: String, offerId: String? = nil) -> RequestBuilder<GetSwapProposalsByOfferId200Response> {
        let localVariablePath = "/integrations/watch-svc-go/swap-proposal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offer-id": (wrappedValue: offerId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "access-token": accessToken.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSwapProposalsByOfferId200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accessToken: (header)  
     - parameter setOfferProposalStatus: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setSwapProposalStatus(accessToken: String, setOfferProposalStatus: SetOfferProposalStatus, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateSwapOffer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return setSwapProposalStatusWithRequestBuilder(accessToken: accessToken, setOfferProposalStatus: setOfferProposalStatus).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /integrations/watch-svc-go/swap-proposal/status
     - set swap status
     - parameter accessToken: (header)  
     - parameter setOfferProposalStatus: (body)  
     - returns: RequestBuilder<CreateSwapOffer200Response> 
     */
    open class func setSwapProposalStatusWithRequestBuilder(accessToken: String, setOfferProposalStatus: SetOfferProposalStatus) -> RequestBuilder<CreateSwapOffer200Response> {
        let localVariablePath = "/integrations/watch-svc-go/swap-proposal/status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setOfferProposalStatus)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "access-token": accessToken.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateSwapOffer200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
